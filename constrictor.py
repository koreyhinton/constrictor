# Dependency Injection Code Generator Framework
from abc import ABC
from interfaces import main_interface
from interfaces import object_interface
from interfaces import lang_interface
import time
import os


def traverse(obj, new_keyword):
    nk = new_keyword
    ctors = []
    for dep in obj.dependencies():
        ctors.append(traverse(dep, nk))
    if len(nk) > 0 and not nk.endswith(' '):
        nk += ' '
    return nk + obj.name() + '(' + ', '.join(ctors) + ')'


class Constrictor(main_interface.MainInterface, object_interface.ObjectInterface, lang_interface.LangInterface, ABC):

    def generate(self):
        init_code = super().indent() + traverse(super(), super().new_keyword()) + super().terminate_statement_symbol()
        for path, vals in super().get_main().items():
            try:
                with open(path, 'r') as rf:
                    contents = rf.read()
                _, fn = os.path.split(path)
                pfx = fn.split('.')[0]
                bkup_path = os.path.dirname(path) + '/' + pfx + '_bkup' + time.strftime("%Y%m%d-%H%M%S") + '.txt'
                with open(bkup_path, 'w') as wf:
                    wf.write(contents)
            finally:
                with open(path, 'w') as mf:
                    gen = super().comment("Auto-generated by Constrictor DI Generator Framework")\
                          + vals['header']\
                          + init_code\
                          + vals['trailer']
                    mf.write(gen)


if __name__ == '__main__':
    pass
