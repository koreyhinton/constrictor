# Dependency Injection Code Generator Framework
from abc import ABC
from interfaces import main_interface
from interfaces import object_interface
from interfaces import lang_interface
import time
import os


def traverse(obj, new_keyword):
    nk = new_keyword
    ctors = []
    for dep in obj.dependencies():
        ctors.append(traverse(dep, new_keyword))
    if len(nk) > 0 and not nk.endswith(' '):
        nk += ' '
    return nk + obj.name() + '(' + ','.join(ctors) + ')'


class Constrictor(main_interface.MainInterface, object_interface.ObjectInterface, lang_interface.LangInterface, ABC):

    def traverse(self, obj):
        for dep in obj.dependencies():
            self.traverse(dep)

    def generate(self):
        hdr = super().comment("Auto-generated by Constrictor DI Generator Framework") + super().get_header()
        trl = super().get_trailer()
        init_code = super().indent() + traverse(super(), super().new_keyword()) + super().terminate_statement_symbol()
        return hdr + init_code + trl

    def write(self, gen):
        write_path = super().get_main_path()
        try:
            with open(write_path, 'r') as rf:
                contents = rf.read()
            bkup_path = os.path.dirname(write_path) + '/' + 'main_bkup' + time.strftime("%Y%m%d-%H%M%S") + '.txt'
            with open(bkup_path, 'w') as wf:
                wf.write(contents)
        finally:
            with open(write_path, 'w') as mf:
                mf.write(gen)


if __name__ == '__main__':
    pass
